import pickle
import telebot
import random
import json
import sqlite3
import validators
import requests

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from time import sleep
from bs4 import BeautifulSoup


class Via_Telegram:
    def __init__(self) -> None:
        # Kh·ªüi t·∫°o th√¥ng tin bot
        self.bot_token = '5422598877:AAFL08R_G8TUVoej8jAYREkQ9uKQrg6jiqs'
        self.bot = telebot.TeleBot(token=self.bot_token, parse_mode='HTML')
        # Handle message /add
        @self.bot.message_handler(commands=["add"])
        def add_info(message):
            self._add_info(message)
        # Handle message /clip
        @self.bot.message_handler(commands=['clip'])
        def add_clip(message):
            self._add_video(message)
        # Handle message /rank
        @self.bot.message_handler(commands=["rank"])
        def rank(message):
            rank_users = self._rank_user(message)
            content = '<b>üéñ DANH S√ÅCH ƒê√ìNG G√ìP üéñ</b>\n'
            ranks = ['ü•á', 'ü•à', 'ü•â']
            i = 1
            for u in rank_users:
                if(i==1):
                    content += str(ranks[0]) + '  @' + u['contributor'] + ' v·ªõi ' + str(u['amount']) + ' ƒë√≥ng g√≥p.\n'
                elif(i==2):
                    content += str(ranks[1]) + '  @' + u['contributor'] + ' v·ªõi ' + str(u['amount']) + ' ƒë√≥ng g√≥p.\n'
                elif(i==3):
                    content += str(ranks[2]) + '  @' + u['contributor'] + ' v·ªõi ' + str(u['amount']) + ' ƒë√≥ng g√≥p.\n'
                else:
                    content += str(i) + '  @' + u['contributor'] + ' v·ªõi ' + str(u['amount']) + ' ƒë√≥ng g√≥p.\n'
                i+=1
            self.bot.reply_to(message, content)
        #Handle message /remove
        @self.bot.message_handler(commands=["remove"])
        def remove_info(message):
            self._remove_info(message)
        # Handle message /start
        @self.bot.message_handler(commands=["start"])
        def about(message):
            self._about(message)
        # Handle message /update
        @self.bot.message_handler(commands=['update'])
        def update(message):
            self._update(message)
        # Handle photo
        @self.bot.message_handler(content_types=['photo', 'document'])
        def handle_photo(message):
            self._upload_image(message)
        # Kh·ªüi t·∫°o th√¥ng tin k·∫øt n·ªëi ƒë·∫øn Database
        self.database = 'data.db'
        self.connection_db = sqlite3.connect(self.database, check_same_thread=False)
        self.cursor = self.connection_db.cursor()
        # Chrome driver
        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.options.add_argument("--headless")
        self.options.add_argument("--window-size=%s" % "1280,1024")


    # Get d·ªØ li·ªáu t·ª´ Instagram
    def _get_info_instagram_bs4(self, url_instagram, contributor):
        headersList = {
            "Accept": "*/*",
        }
        payload = ""
        try:
            response = requests.request("GET", url_instagram, data=payload,  headers=headersList)
            data = BeautifulSoup(response.text, "html5lib")
            info = str(data.title).split('‚Ä¢')[0][7:]

            idx = (str(data).index('"profile_pic_url":'))
            url_pic = (str(data)[idx+19:idx+500].split('"')[0].replace('\\', ''))
            result = self.cursor.execute('SELECT COUNT(URL) FROM main WHERE URL = ?', (str(url_instagram),))
            if (int(result.fetchone()[0]) == 0):
                self.cursor.execute('INSERT INTO main (URL, USERNAME, URL_PIC, CONTRIBUTORS) VALUES(?, ?, ?, ?)', (url_instagram, info.strip(), url_pic, contributor))
                self.connection_db.commit()
                return 1
            else:
                return 0  
        except Exception as e:
            return 2

    # Get d·ªØ li·ªáu t·ª´ Instagram
    def _get_info_instagram_selenium(self, url_instagram, contributor):
        try:
            self.driver = webdriver.Chrome(executable_path = '/usr/lib/chromium-browser/chromedriver', chrome_options=self.options)
            self.driver.get(url_instagram)
            # ƒê·ª£i load xong
            sleep(10)
            uname = str(self.driver.title).split('@')[1]
            uname = uname.split(')')[0]
            url_pic = self.driver.find_element(By.CSS_SELECTOR, '[alt="'+str(uname)+'\'s profile picture"]').get_attribute('src')

            result = self.cursor.execute('SELECT COUNT(URL) FROM main WHERE URL = ?', (str(url_instagram),))
            if (int(result.fetchone()[0]) == 0):
                self.cursor.execute('INSERT INTO main (URL, USERNAME, URL_PIC, CONTRIBUTORS) VALUES(?, ?, ?, ?)', (url_instagram, uname.strip(), url_pic, contributor))
                self.connection_db.commit()
                return 1    
            else:
                return 0
        except Exception as e:
            return 2

    # Get d·ªØ li·ªáu t·ª´ Tiktok
    def _get_info_tiktok(self, url_tiktok, contributor):
        try:
            self.driver = webdriver.Chrome(executable_path = '/usr/lib/chromium-browser/chromedriver', chrome_options=self.options)
            self.driver.get(url_tiktok)
            profile_picture = self.driver.find_element(By.XPATH, '//*[@id="app"]/div[2]/div[2]/div/div[1]/div[1]/div[1]/span/img').get_attribute("src")
            title = self.driver.title
            user_name = str(title)[:str(title).index("TikTok")]

            result = self.cursor.execute('SELECT COUNT(URL) FROM main WHERE URL = ?', (str(url_tiktok),))
            if (int(result.fetchone()[0]) == 0):
                self.cursor.execute('INSERT INTO main (URL, USERNAME, URL_PIC, CONTRIBUTORS) VALUES(?, ?, ?, ?)', (url_tiktok, user_name.strip(), profile_picture, contributor))
                self.connection_db.commit()
                return 1    
            else:
                return 0
        except Exception as e:
            return 0

    # Get d·ªØ li·ªáu video tiktok
    def _get_video_tiktok(self, url_tiktok, contributor):
        try:
            self.driver = webdriver.Chrome(executable_path = '/usr/lib/chromium-browser/chromedriver', chrome_options=self.options)
            self.driver.get(url_tiktok)

            title = self.driver.find_element(By.XPATH, '//*[@id="app"]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[2]/div').text
            thumbnail = self.driver.find_element(By.XPATH, '/html/head/meta[27]').get_attribute("content")
            # return(title + thumbnail)
            result = self.cursor.execute('SELECT COUNT(URL) FROM video WHERE URL = ?', (str(url_tiktok),))

            if(int(result.fetchone()[0]) == 0):
                self.cursor.execute('INSERT INTO video (URL, TITLE, THUMBNAIL, CONTRIBUTORS) VALUES(?, ?, ?, ?)', (url_tiktok, title, thumbnail, contributor))
                self.connection_db.commit()
                return (1)
            else:
                return 0
        except Exception as e:
            return 2

    # Th√™m m·ªõi d·ªØ li·ªáu
    def _add_info(self, message):
        if('/add' in str(message.text).lower()):
            try:
                url = str(message.text).split(' ')[1]
                contributor = str(message.from_user.username)
                if(validators.url(url)):
                    if('instagram' in str(url).lower()):
                        result = self._get_info_instagram_bs4(url, contributor)
                        if result == 1:
                            self.bot.reply_to(message, "üåü<b>XIN CH√ÇN TH√ÄNH C·∫¢M ∆†N S·ª∞ ƒê√ìNG G√ìP C·ª¶A B·∫†N</b>üåü\nC·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n l√†m cho c·ªông ƒë·ªìng ng√†y c√†ng ph√°t tri·ªÉn, ƒë·ªùi s·ªëng c·ªßa anh em ƒë∆∞·ª£c c·∫£i thi·ªán.\nXin vinh danh s·ª± ƒë√≥ng g√≥p n√†y, bravo!!!")
                        elif result == 0:
                            self.bot.reply_to(message, "Sorry b·∫°n, h√¨nh nh∆∞ profile ƒë√£ ƒë∆∞·ª£c v·ªã cao nh√¢n n√†o ƒë√≥ ƒë√≥ng g√≥p tr∆∞·ªõc. C·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n!")
                        else:
                            self.bot.reply_to(message, "Ops! Server ƒë√£ b·ªã Instagram block IP do c√≥ qu√° nhi·ªÅu request trong kho·∫£n th·ªùi gian ng·∫Øn. B·∫°n vui l√≤ng th√™m l·∫°i sau v√†i gi·ªù nh√©!")
                    elif('tiktok' in str(url).lower()):
                        result = self._get_info_tiktok(url, contributor)
                        if result == 1:
                            self.bot.reply_to(message, "üåü<b>XIN CH√ÇN TH√ÄNH C·∫¢M ∆†N S·ª∞ ƒê√ìNG G√ìP C·ª¶A B·∫†N</b>üåü\nC·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n l√†m cho c·ªông ƒë·ªìng ng√†y c√†ng ph√°t tri·ªÉn, ƒë·ªùi s·ªëng c·ªßa anh em ƒë∆∞·ª£c c·∫£i thi·ªán.\nXin vinh danh s·ª± ƒë√≥ng g√≥p n√†y, bravo!!!")
                        elif result == 0:
                            self.bot.reply_to(message, "Sorry b·∫°n, h√¨nh nh∆∞ profile ƒë√£ ƒë∆∞·ª£c v·ªã cao nh√¢n n√†o ƒë√≥ ƒë√≥ng g√≥p tr∆∞·ªõc. C·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n!")
                    else:
                        self.bot.reply_to(message, '<i>Hi·ªán t·∫°i h·ªá th·ªëng ch∆∞a h·ªó tr·ª£ trang web n√†y. C·∫£m ∆°n v√¨ s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n!</i>')
            except Exception as e:
                self.bot.reply_to(message, 'Vui l√≤ng ƒëi·ªÅn URL h·ª£p l·ªá!')

    # Th√™m d·ªØ li·ªáu video tiktok
    def _add_video(self, message):
        if('/clip' in str(message.text).lower()):
            try:
                url = str(message.text).split(' ')[1]
                contributor = str(message.from_user.username)
                if(validators.url(url)):
                    result = self._get_video_tiktok(url, contributor)
                    if(result == 1):
                        self.bot.reply_to(message, "üåü<b>XIN CH√ÇN TH√ÄNH C·∫¢M ∆†N S·ª∞ ƒê√ìNG G√ìP C·ª¶A B·∫†N</b>üåü\nC·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n l√†m cho c·ªông ƒë·ªìng ng√†y c√†ng ph√°t tri·ªÉn, ƒë·ªùi s·ªëng c·ªßa anh em ƒë∆∞·ª£c c·∫£i thi·ªán.\nXin vinh danh s·ª± ƒë√≥ng g√≥p n√†y, bravo!!!")
                    elif result == 0:
                        self.bot.reply_to(message, "Sorry b·∫°n, h√¨nh nh∆∞ profile ƒë√£ ƒë∆∞·ª£c v·ªã cao nh√¢n n√†o ƒë√≥ ƒë√≥ng g√≥p tr∆∞·ªõc. C·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n!")
            except Exception as e:
                self.bot.reply_to(message, 'Vui l√≤ng ƒëi·ªÅn URL h·ª£p l·ªá!')

    # Xo√° d·ªØ li·ªáu
    def _remove_info(self, message):
        if("/remove" in str(message.text).lower()):
            try:
                if(str(message.text).split(" ")[1] != ''):
                    if(str(message.text).split(" ")[1] == 'profile'):
                        ID = int(str(message.text).split(" ")[2])
                        self.cursor.execute('DELETE FROM main WHERE ID = ?', (ID,))
                    elif(str(message.text).split(" ")[1] == 'clip'):
                        ID = int(str(message.text).split(" ")[2])
                        self.cursor.execute('DELETE FROM video WHERE ID = ?', (ID,))
                    elif(str(message.text).split(" ")[1] == 'photo'):
                        ID = int(str(message.text).split(" ")[2])
                        self.cursor.execute('DELETE FROM photo WHERE ID = ?', (ID,))
                    self.connection_db.commit()
                    self.bot.reply_to(message, 'Xo√° th√†nh c√¥ng!')
                else:
                    self.bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ID c·∫ßn xo√°!\nXem ID t·∫°i: https://hoctap.giangpt.dev/')    
            except Exception as e:
                self.bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ID c·∫ßn xo√°!\nXem ID t·∫°i: https://hoctap.giangpt.dev/')    

    # X·∫øp h·∫°ng ƒë√≥ng g√≥p
    def _rank_user(self, message):
        if('/rank' in str(message.text).lower()):
            try:
                rank_users = []
                result_profiles = self.cursor.execute('select count(CONTRIBUTORS), CONTRIBUTORS from (select * from main union select * from video) group by CONTRIBUTORS')
                for u in result_profiles.fetchall():
                    rank_users.append({"contributor": u[1], "amount": u[0]})
                return sorted(rank_users, key=lambda d: d['amount'], reverse=True) 
            except Exception as e:
                return e

    # Gi·ªõi thi·ªáu bot
    def _about(self, message):
        if('/start' in str(message.text)):
            self.bot.reply_to(message, "Xin ch√†o <b>" + str(message.from_user.first_name) + "</b>,\n\n<b>Th√™m profile Instagram</b>\n<pre>/add https://instagram.com/USERNAME</pre>\n<b>Th√™m profile TikTok</b>\n<pre>/add https://www.tiktok.com/@USERNAME</pre>\n<b>Th√™m video TikTok</b>\n<pre>/clip https://vt.tiktok.com/ID_VIDEO</pre>\n<b>Ho·∫∑c c√≥ th·ªÉ g·ª≠i ·∫£nh cho bot, l∆∞u √Ω nh·ªõ ch·ªçn </b><em>Compress Images</em>.\n<b>Xo√° profile</b>\n<pre>/remove profile [ID]</pre>\n<b>Xo√° video</b>\n<pre>/remove clip [ID]</pre>\n<b>Xo√° ·∫£nh</b>\n<pre>/remove photo [ID]</pre>\n<b>C·∫≠p nh·∫≠t </b><pre>/update</pre>\n<b>Danh s√°ch ƒë√≥ng g√≥p</b>\n<pre>/rank</pre>")

    # C·∫≠p nh·∫≠t DB khi avatar l·ªói
    def _update(self, message):
        if('/update' in str(message.text)):
            headersList = {
                "Accept": "*/*",
            }
            payload = ""
            self.bot.reply_to(message, 'ƒêang th·ª±c hi·ªán update. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t!')
            try:
                data = self.cursor.execute('SELECT * FROM main')
                for i in data.fetchall():
                    response = requests.request("GET", i[3], data=payload,  headers=headersList)
                    id = int(i[0])
                    url = str(i[1])
                    contributor = str(i[4])
                    if(response.text == 'URL signature expired'):
                        self.cursor.execute('DELETE FROM main WHERE ID = ?', (id,))
                        self.connection_db.commit()
                        self._get_info_instagram_bs4(url, contributor)
                    elif(BeautifulSoup(response.text, 'html5lib').title == 'Access Denied'):
                        self.cursor.execute('DELETE FROM main WHERE ID = ?', (id,))
                        self.connection_db.commit()
                        self._get_info_tiktok(url, contributor)
                    sleep(15)
                self.bot.reply_to(message, 'ƒê√£ update th√†nh c√¥ng!')
            except Exception as e:
                print(e)

    # H√†m upload h√¨nh ·∫£nh
    def _upload_image(self, message):
        try:
            file = self.bot.get_file(message.photo[-1].file_id)
            url_img = 'https://api.telegram.org/file/bot'+self.bot_token+'/'+file.file_path
            url = "https://api.imgur.com/3/image"
            payload={'image': url_img}
            files=[]
            headers = {
            'Authorization': 'Client-ID 306f7cc6448a694'
            }

            response = requests.request("POST", url, headers=headers, data=payload, files=files)
            res = json.loads(response.text)

            if(int(res['status']) == 200):
                contributor = str(message.from_user.username)
                url_imgur = res['data']['link']
                self.cursor.execute('INSERT INTO photo (URL, CONTRIBUTORS) VALUES (?, ?)', (url_imgur, contributor))
                self.connection_db.commit()
                self.bot.reply_to(message, "üåü<b>XIN CH√ÇN TH√ÄNH C·∫¢M ∆†N S·ª∞ ƒê√ìNG G√ìP C·ª¶A B·∫†N</b>üåü\nC·∫£m ∆°n s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n l√†m cho c·ªông ƒë·ªìng ng√†y c√†ng ph√°t tri·ªÉn, ƒë·ªùi s·ªëng c·ªßa anh em ƒë∆∞·ª£c c·∫£i thi·ªán.\nXin vinh danh s·ª± ƒë√≥ng g√≥p n√†y, bravo!!!")
        except Exception:
            self.bot.reply_to(message, 'Th√™m ·∫£nh kh√¥ng th√†nh c√¥ng, vui l√≤ng ch·ªçn h√¨nh ·∫£nh v√† ch·ªçn "Compress images".')

if __name__ == '__main__':
    via_tele = Via_Telegram()
    via_tele.bot.infinity_polling()
